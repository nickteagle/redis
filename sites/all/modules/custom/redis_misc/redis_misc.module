<?php
/**
 * Implements hook_menu().
 */
function redis_misc_menu() {
  $items['news/news'] = array(
    'title' => 'News',
    'description' => 'News.',
    'page callback' => 'redis_misc_news_list_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['news/news-bbc'] = array(
    'title' => 'BBC News',
    'description' => 'BBC News.',
    'page callback' => 'redis_misc_news_item_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['news/news-sky'] = array(
    'title' => 'SKY News',
    'description' => 'SKY News.',
    'page callback' => 'redis_misc_news_item_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['news/news-channel-4'] = array(
    'title' => 'Channel 4 News',
    'description' => 'Channel 4 News.',
    'page callback' => 'redis_misc_news_item_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implement hook_theme.
 */
function redis_misc_theme() {
  return array(
    'news_page' => array(
      'variables' => array(
        'content' => NULL,
        'news' => NULL,
      ),
      'template' => 'news_page',
      'path' => drupal_get_path('module', 'redis_misc') . '/template',
    ),
  );
}

/**
 * Implements hook_preprocess_node().
 */
function redis_misc_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['news_item'] = array(
    'label' => t('News Item'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['news_feed_item'] = array(
    'label' => t('News Feed Item'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['news_full'] = array(
    'label' => t('News Full'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_preprocess_node().
 */
function redis_misc_preprocess_node(&$vars) {
  $date = new DateTime('@' . $vars['node']->created);
  $vars['pub_date'] = $date->format('d/m/y H:i');
  if($vars['view_mode'] == 'news_item') {
    $vars['theme_hook_suggestions'] = array('node__' . $vars['type'] . '__news_item');
    $vars['body'] = $vars['node']->body[LANGUAGE_NONE][0]['value'];
    $vars['title_link'] = l($vars['title'], 'node/' . $vars['node']->nid);
  }
  if($vars['view_mode'] == 'news_full') {
    $vars['theme_hook_suggestions'] = array('node__' . $vars['type'] . '__news_full');
    $vars['body'] = $vars['node']->body[LANGUAGE_NONE][0]['value'];
  }
  if($vars['view_mode'] == 'news_feed_item') {
    $vars['theme_hook_suggestions'] = array('node__news__news_feed_item');
    $vars['body'] = empty($vars['node']->body[LANGUAGE_NONE][0]['value']) ? '' : $vars['node']->body[LANGUAGE_NONE][0]['value'];
  }
  if($vars['view_mode'] == 'news_page_item') {
    $vars['theme_hook_suggestions'] = array('node__news__news_page_item');
    $vars['body'] = $vars['node']->body[LANGUAGE_NONE][0]['value'];
  }
}

/**
 * Load the new listing page.
 */
function redis_misc_news_list_page() {
  $results = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'news')
    ->execute()
    ->fetchCol();
  foreach ($results as $nid) {
    $results_array[] = array(
      'data' => redis_misc_load_fragment($nid, 'news_item'),
      'class' => array('news')
    );
  }
  return theme('item_list', array('items' => $results_array));
}

/**
 * Load an entity fragment from redis if available if not generate it.
 */
function redis_misc_load_fragment($entity_id, $view_type, $regen = TRUE) {
  $fragment = '';
  if (variable_get('redis_ssi_disable', FALSE)) {
    $node = node_load($entity_id);
    $fragment = redis_ssi_node_fragment($node, $view_type);
  }
  else {
    if ($regen) {
      $fragment = redis_ssi_client()->hget('node', "$entity_id:$view_type");
    }
    if (empty($fragment)) {
      $node = node_load($entity_id);
      $fragment = redis_ssi_node_fragment($node, $view_type);
    }
  }
  return $fragment;
}

/**
 * Load a new item page.
 */
function redis_misc_news_item_page($node) {
  if ($node->type == 'news') {
    $type = $node->field_news_type[LANGUAGE_NONE][0]['value'];
    $build['news_page'] = array(
      '#theme' => 'news_page',
      '#content' => redis_misc_load_fragment($node->nid, 'news_full'),
      '#news' => redis_misc_get_segment($type),
    );
    return drupal_render($build);
  }
}
/**
 * Implement hook_feeds_after_import to process the news fragments after import.
 */
function redis_misc_feeds_after_import($feed) {
  switch ($feed->id) {
    case 'news_feed_bbc':
      redis_misc_feed_process_news('news_item_bbc');
      redis_ssi_instantly_regenerate_page('/news/news-bbc');
      break;
    case 'news_feed_sky':
      redis_misc_feed_process_news('news_item_sky');
      redis_ssi_instantly_regenerate_page('/news/news-sky');
      break;
    case 'news_feed_channel_4':
      redis_misc_feed_process_news('news_item_channel_4');
      redis_ssi_instantly_regenerate_page('/news/news-channel-4');
      break;
  }
}

/**
 * Get a segment from redis or load/regen it.
 */
function redis_misc_get_segment($type, $regen = FALSE) {
  $segment = '';
  if (variable_get('redis_ssi_disable', FALSE)) {
    $segment = redis_misc_load_segment($type);
  }
  else {
    if ($regen) {
      $segment = redis_misc_load_segment($type);
      redis_misc_save_segment($type, $segment);
    }
    else {
      $segment = redis_ssi_client()->hget('segment', "$type");
    }
  }
  return $segment;
}

/**
 * Load segment by regenerating it.
 */
function redis_misc_load_segment($type) {
  $news_item_nids = redis_misc_load_segment_sql($type, 5);
  foreach($news_item_nids as $nid) {
    $fragments[] = array(
      'data' => redis_misc_load_fragment($nid, 'news_feed_item'),
      'class' => array('segment-item'),
    );
  }
  return theme('item_list', array('items' => $fragments));
}

/**
 * Sql for loading a news item.
 */
function redis_misc_load_segment_sql($type, $range) {
  return db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', $type)
    ->orderBy('n.created', 'DESC')
    ->range(0, $range)
    ->execute()
    ->fetchCol();
}

/**
 * save a segement to redis.
 */
function redis_misc_save_segment($type, $segment) {
  redis_ssi_client()->hset('segment', $type, $segment);
}

/**
 * Process an individual news type and regen its segemnt and update the news item.
 */
function redis_misc_feed_process_news($type) {
error_log('redis_misc_feed_process_news='.$type);
  redis_misc_get_segment($type, TRUE);

  $nid = db_select('field_data_field_news_type', 'f')
    ->fields('f', array('entity_id'))
    ->condition('f.field_news_type_value', $type)
    ->execute()
    ->fetchField();

  $news_node = node_load($nid);
  $news_item_nids = redis_misc_load_segment_sql($type, 3);
  $body = redis_misc_news_list_segment($news_item_nids);
error_log('body='.print_r($body,1));
  $news_node->body[LANGUAGE_NONE][0]['value'] = $body;
  node_save($news_node);
  redis_ssi_instantly_regenerate_page('/news/news');
}

/**
 * Generate the segement for teh news page.
 */
function redis_misc_news_list_segment($news_item_nids) {
  foreach($news_item_nids as $nid) {
    $fragments[] = array(
      'data' => redis_misc_load_fragment($nid, 'news_page_item'),
      'class' => array('segment-list'),
    );
  }
  return theme('item_list', array('items' => $fragments));
}
