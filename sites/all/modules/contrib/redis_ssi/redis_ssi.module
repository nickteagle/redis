<?php
/**
 * @file redis_ssi.module
 * Implement redis caching.
 */

define('REDIS_SSI_USER_AGENT', 'redis-ssi');

function redis_ssi_generate() {
  return user_is_anonymous() && !variable_get('redis_ssi_disable', FALSE) && !empty($_SERVER['HTTP_USER_AGENT']) && $_SERVER['HTTP_USER_AGENT'] == REDIS_SSI_USER_AGENT;
}

function redis_ssi_menu() {
  $items['node/%node/fragment/%'] = array(
    'title' => 'Node fragment',
    'description' => 'Render an html fragment for a node by view mode.',
    'page callback' => 'redis_ssi_node_fragment',
    'page arguments' => array(1, 3),
    'delivery callback' => 'redis_ssi_deliver_naked',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Render a node according the the view mode and return a render array.
 *
 * @todo Provide a way of getting cached node fragments from Redis.
 *
 * @param object $node
 *   A fully populated node object.
 * @param string $view_mode
 *   The view mode used to render the node.
 *
 * @return Array
 *   A fully built render array suitable for drupal_render.
 */
function redis_ssi_node_fragment($node, $view_mode) {
  $build = node_view($node, $view_mode);
  if (!variable_get('redis_ssi_disable', FALSE)) {
    $redis_key = 'node:' . $node->nid . ':' . $view_mode;
    $build['#cache'] = array(
      'bin' => 'redis',
      // Can't use keys here because it adds the theme name.
      'cid' => $redis_key,
    );
  }
  return drupal_render($build);
}

/**
 * Deliver just the supplied markup, not wrapped in a page.
 *
 * @param $page_callback_result
 */
function redis_ssi_deliver_naked($page_callback_result) {
  if (empty($page_callback_result)) {
    drupal_not_found();
  }
  elseif (is_int($page_callback_result)) {
    drupal_deliver_html_page($page_callback_result);
  }
  else {
    global $language;
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
    drupal_add_http_header('Content-Language', $language->language);
    print $page_callback_result;
  }
}

/**
 * Implements hook_entity_prepare_view().
 *
 * Save the nodes statically.
 */
function redis_ssi_entity_prepare_view($entities, $entity_type) {
  if (redis_ssi_generate()) {
    $keys = &drupal_static('redis_ssi_entity_prepare_view', array());
    if ($entity_type == 'node') {
      $keys = array_keys($entities);
    }
  }
}

/**
 * Implements hook_node_page_alter().
 */
function redis_ssi_page_alter(&$build) {
  // ... and the generating agent then set the cache.
  if (redis_ssi_generate() || (!empty($build['#node']->redis_cache))) {
    $page_hash = variable_get('redis_ssi_page_hash', 'page');
    $trimmed_uri = preg_replace('|/(\?.*)?$|', '$1', request_uri());
    $redis_key = str_replace('/', ':', $trimmed_uri);
    foreach (array('site_404', 'site_403') as $key) {
      if (current_path() == drupal_get_normal_path(variable_get($key, ''))) {
        $redis_key = ':' . $key;
      }
    }
    $build['#cache'] = array(
      'bin' => 'redis',
      // Can't use keys here because it adds the theme name.
      'cid' => $page_hash . $redis_key,
    );
  }
  if (!variable_get('redis_ssi_disable', FALSE)) {
    $path = variable_get('redis_ssi_nginx_path', '/redis');
    $options = array(
      'type' => 'inline',
      'weight' => 100,
    );
    drupal_add_js('jQuery.extend(Drupal.settings, new Object(<!--# include virtual="' . $path . '/session/settings" -->))', $options);
  }
  elseif (!empty($_SESSION['redis_ssi_js_settings'])) {
    drupal_add_js(array('redis' => $_SESSION['redis_ssi_js_settings']), 'setting');
  }
}

/**
 * Implements hook_user_login.
 */
function redis_ssi_user_login($edit, $account) {
  redis_ssi_populate_user_js($account);
}

/**
 * Generate users javascript and store it in redis session cache.
 */
function redis_ssi_populate_user_js($account) {
  $account = user_load($account->uid, TRUE);
  $data_settings = module_invoke_all('redis_ssi_user_settings', $account);
  // There is no need for a check here, the redis_ssi_client() will return
  // dummy client if redis_ssi is disabled and Apache needs the settings
  // anyways.
  redis_ssi_write_session('settings', json_encode(array('redis' => $data_settings)));
  $_SESSION['redis_ssi_js_settings'] = $data_settings;
}

/**
 * Loads the Predis library.
 *
 * $volatile
 *   Optional. When true, returns the client object for the volatile redis.
 * $ignore_settings
 *   Try to connect even if redis_ssi_disable is TRUE. Used by redis_ssi.session.inc.
 */
function redis_ssi_client($volatile = FALSE, $ignore_settings = FALSE) {
  static $client = array();
  include_once __DIR__ . '/predis/autoload.php';
  $key_suffix = $volatile ? '_volatile' : '';
  if (!isset($client[$key_suffix])) {
    if (variable_get('redis_ssi_disable', FALSE) && !$ignore_settings) {
      $client[$key_suffix] = new RedisSSIDummyClient;
    }
    else {
      $client[$key_suffix] = new RedisSSIClient(array(
        'scheme' => 'tcp',
        'host'   => variable_get('redis_ssi_host' . $key_suffix, variable_get('redis_ssi_host', 'localhost')),
        'port'   => variable_get('redis_ssi_port' . $key_suffix, variable_get('redis_ssi_port', 6379)),
      ));
    }
  }
  return $client[$key_suffix];
}

/**
 * Regenerate page.
 *
 * Regenerate page by firing an http request to the server.
 * Since this is only a trick to force the web server to regenerate the page,
 * don't wait for a response, because we don't use it here.
 *
 * @param $path
 *  The path to regenerate.
 */
function redis_ssi_instantly_regenerate_page($path) {
  if (variable_get('redis_ssi_disable', FALSE)) {
    return;
  }
  // Fire a GET request and don't bother with waiting for a reply.
  $host = variable_get('redis_ssi_regenerate_host', $_SERVER['HTTP_HOST']);
  $paths = array(url($path));
  if ($path == variable_get('site_frontpage', 'node')) {
    $paths[] = base_path();
  }
  foreach ($paths as $path) {
    $port = variable_get('redis_ssi_regenerate_port', empty($_SERVER['SERVER_PORT']) ? 80 : $_SERVER['SERVER_PORT']);
    $fp = fsockopen($host, $port);
    $out = implode("\r\n", array(
      "GET $path HTTP/1.1",
      "Host: $host",
      'User-Agent: ' . REDIS_SSI_USER_AGENT,
      'Connection: Close',
    ));
    fwrite($fp, "$out\r\n\r\n");
    fclose($fp);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function redis_ssi_views_pre_render($view) {
  if (get_class($view->style_plugin) == 'views_plugin_style_default' && get_class($view->style_plugin->row_plugin) == 'views_plugin_row_node_view') {
    // Reset nodes already generated.
    redis_ssi_reset_prepared_nodes($view->style_plugin->row_plugin->nodes);
    // This will cause redis_ssi to write one include for the whole view.
    entity_prepare_view('node', $view->style_plugin->row_plugin->nodes);
  }
}

/**
 * Reset nodes already prepared for entity view.
 *
 * Without this, already rendered nodes won't show up on node_multiple_view().
 */
function redis_ssi_reset_prepared_nodes(&$nodes) {
  foreach ($nodes as $key => $node) {
    if (!empty($node->entity_view_prepared)) {
      $nodes[$key] = entity_load_unchanged('node', $node->nid);
    }
  }
}

/**
 * Regenerate nodes.
 */
function redis_ssi_regenerate_node($nid) {
  $node = node_load($nid);
  $_GET['q'] = "node/$nid";
  redis_ssi_regenerate_node_page($node);
  module_invoke_all('redis_ssi_regenerate_node', $node);
}

/**
 * Helper to create a queue item for regenerating the node page.
 */
function redis_ssi_regenerate_node_page($node) {
  redis_ssi_queue_get()->createItem('page', "node/$node->nid", isset($node->redis_ssi_weight) ? $node->redis_ssi_weight : 0);
}

/**
 * Regenerate pages.
 */
function redis_ssi_regenerate_page($path, $item) {
  $queue = redis_ssi_queue_get();
  $n = variable_get('redis_ssi_regenerate_count', 5);
  $start = time();
  $curl_handlers = array();
  $curl_multi_handler = curl_multi_init();
  $paths = array($path);
  $i = $n;
  $items = array();
  while (--$i && ($item = $queue->claimPageItem())) {
    $paths[] = $item->object_id;
    $items[$item->object_id] = $item;
  }
  // We might fire one more than prescribed for the homepage. Oh well.
  $home_paths = array(variable_get('site_frontpage', 'node'), '<front>');
  if (array_intersect($home_paths, $paths)) {
    $paths = array_unique(array_merge($paths, $home_paths));
  }
  foreach ($paths as $k => $path) {
    $curl_handlers[$k] = curl_init();
    curl_setopt_array($curl_handlers[$k], variable_get('redis_ssi_curl_options', array()) + array(
      CURLOPT_URL => url($path, array('absolute' => TRUE)),
      CURLOPT_FOLLOWLOCATION => TRUE,
      CURLOPT_RETURNTRANSFER => 1,
      CURLOPT_USERAGENT => REDIS_SSI_USER_AGENT,
    ));
    curl_multi_add_handle($curl_multi_handler, $curl_handlers[$k]);
  }
  do {
    // This loop is only necessary for libcurl earlier than 7.20.0, however
    // RHEL 5 has just that. Otherwise a simple call would do.
    do {
      $multi_result = curl_multi_exec($curl_multi_handler, $active);
    } while ($multi_result == CURLM_CALL_MULTI_PERFORM);
    // Block until there is  activity on any of the handlers. Avoids
    // busywaiting.
    if ($multi_result == CURLM_OK) {
      $select_result = curl_multi_select($curl_multi_handler);
    }
    if ($multi_result != CURLM_OK || $select_result == -1) {
      // @TODO: error handling. Something truly awkward happened.
      return FALSE;
    }
  } while ($select_result != -1 && $active && $multi_result == CURLM_OK);
  foreach ($curl_handlers as $curl_handler) {
    curl_multi_remove_handle($curl_multi_handler, $curl_handler);
    curl_close($curl_handler);
  }
  curl_multi_close($curl_multi_handler);
  foreach ($items as $item) {
    $queue->deleteItem($item);
  }
}

function redis_ssi_cron() {
  db_update('redis_ssi_queue')
    ->fields(array(
      'expire' => 0,
    ))
    ->condition('expire', 0, '<>')
    ->condition('expire', REQUEST_TIME, '<')
    ->execute();
}

function redis_ssi_queue_get() {
  static $queue;
  if (empty($queue)) {
    $queue = new RedisSSIQueue;
  }
  return $queue;
}

/**
 * Store data under the users session variable in redis.
 *
 * @param $identifier
 *  An identifier string, this must match '(\+w) regex used in nginx.conf.
 *
 * @param $data
 * The data to be stored.
 *
 */
function redis_ssi_write_session($identifier, $data) {
  redis_ssi_client(TRUE)->setex('session:' . $identifier . ':' . session_id(), ini_get('session.gc_maxlifetime'), $data);
}

/**
 * Implements hook_form_search_block_form_alter().
 *
 * Nuke form token handling -- the redis page will not have a valid token in
 * it. And it is not necessary anyways because request forgery is not a
 * problem for search.
 */
function redis_ssi_form_search_block_form_alter(&$form) {
  unset($form['#token'], $form['form_token']);
}

/**
 * Implements hook_redis_ssi_regenerate_node($node()/
 *
 * We do it this way so it can be removed with
 * hook_module_implements_alter() if badly necessary.
 */
function redis_ssi_redis_ssi_regenerate_node($node) {
  static $view_modes = array();
  if (empty($view_modes)) {
    $entity_info = entity_get_info('node');
    foreach (array_keys($entity_info['bundles']) as $bundle) {
      $bundle_settings = field_bundle_settings('node', $bundle);
      foreach ($bundle_settings['view_modes'] as $view_mode => $view_mode_settings) {
        if (!empty($view_mode_settings['custom_settings'])) {
          $view_modes[$bundle][] = $view_mode;
        }
      }
    }
  }
  $queue = redis_ssi_queue_get();

  foreach ($view_modes[$node->type] as $view_mode) {
    $queue->createItem('page', "node/$node->nid/fragment/$view_mode");
  }
}
