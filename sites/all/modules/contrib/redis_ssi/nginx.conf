user http;
worker_processes  1;


error_log  logs/error.log;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$http_cookie" "$session_id"';

    access_log  logs/access.log  main;
    #access_log off;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
    upstream webdis {
      server 127.0.0.1:7379;
    }
    upstream apache {
      server 127.0.0.1:81;
    }

    server {
        recursive_error_pages on;
        listen       80;
        server_name  chx.itv.com;
        # This very well can be our load balancer nginx, separate from the
        # ones listed in upstream.
        location /itvplayer {
            if ($http_user_agent ~ "redis-ssi") {
                proxy_pass http://apache;
                break;
            }

            if ($args ~ "^([^&]+)(?:&(.*))?$") {
              set $arg1 $1;
              set $arg2 $2;
              rewrite ^(.*)$ $1/$arg1?$arg2? last;
            }

            # This is a page, convert slashes into colons in a loop.
            # First remove end slashes if there are any. There can only be ten
            # rewrites so do not waste one on just slash removal.
            rewrite ^(/[^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/(.*)/$ $1:$2:$3:$4:$5:$6:$7:$8:$9 last;
            rewrite ^(/[^/]+)/(.*)/$ $1:$2 last;
            rewrite ^(/[^/]+)/$ $1 last;
            rewrite ^(/[^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/(.*)$ $1:$2:$3:$4:$5:$6:$7:$8:$9 last;
            rewrite ^(/[^/]+)/(.*)$ $1:$2 last;
            # Add page: to the converted URL and pass it along.
            rewrite ^/(.*)$ /redis/page/$1 last;
        }

        location /search {
            proxy_pass http://apache;
        }

        location /admin {
            proxy_pass http://apache;
        }

        location /api {
            proxy_pass http://apache;
        }

        location /user {
            ssi on;
            if ($http_user_agent ~ "redis-ssi") {
                proxy_pass http://apache;
            }

            if ($request_method = POST) {
                proxy_pass http://apache;
                break;
            }

            # This is a page, convert slashes into colons in a loop.
            rewrite ^(/[^/]+)/(.*)$ $1:$2 last;
            # Add page: to the converted URL and pass it along.
            rewrite ^/(.*)$ /redis/page/$1 last;
        }

        location ~ /(.*)\.(js|css|gif|jpg|jpeg|png|swf|ttf|html)$ {
            proxy_pass http://apache;
        }

        location /redis/expire {
            internal;
            ssi on;
            ssi_value_length 1024;
            set $session_id none;

            if ($http_cookie ~ "^.*SESS\w+\=([-0-9A-Za-z_]+).*$" ) {
               set $session_id $1;
            }


            rewrite ^/redis/expire/(\d+)$ /EXPIRE/expire_$session_id/$1 break;
            rewrite ^ /QUIT break;
            #We would change this to target the volatile webdis
            proxy_pass http://webdis;
        }


        location /redis/session {
            internal;
            ssi on;
            ssi_value_length 1024;
            set $session_id none;

            if ($http_cookie ~ "^.*SESS\w+\=([-0-9A-Za-z_]+).*$" ) {
               set $session_id $1;
            }

            rewrite ^/redis/session/(\w+)$ /GET/session:$1:$session_id.html break;
            rewrite ^ /QUIT break;
            #We would change this to target the volatile webdis
            proxy_pass http://webdis;
        }
        location /redis {
            internal;
            ssi on;
            ssi_value_length 1024;
            set $session_id none;

            if ($http_cookie ~ "^.*SESS\w+\=([-0-9A-Za-z_]+).*$" ) {
               set $session_id $1;
            }

            expires -1;
            add_header    Cache-Control  "no-store, must-revalidate, post-check=0, pre-check=0";
            rewrite ^(.*)%2F(.*)$ $1%252F$2;


            rewrite ^/redis/page/(.*) /HGET/page/$1.html break;
            set $extension html;
            if ($http_accept ~ application/json) {
              set $extension json;
            }
            rewrite ^/redis/(.*) /HMGET/$1.$extension break;
            proxy_method GET;
            proxy_pass_request_body off;
            proxy_set_header Content-Length 0;
            proxy_intercept_errors on;
            error_page 404 @not_found;
            error_page 403 @access_denied;
            proxy_pass http://webdis;
        }
        location @not_found {
          rewrite (.*) /HGET/page/site_404.html break;
          error_page 404 @maintenance;
          proxy_intercept_errors on;
          proxy_pass http://webdis;
        }
        location @access_denied {
          rewrite (.*) /HGET/page/site_403.html break;
          error_page 404 @maintenance;
          proxy_intercept_errors on;
          proxy_pass http://webdis;
        }
        location @maintenance {
          rewrite (.*) /GET/maintenance.html break;
          proxy_pass http://webdis;
        }

}
